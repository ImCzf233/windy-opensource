package space.emptiness.module.modules.exploit;

import net.minecraft.client.Minecraft;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.Vec3;
import space.emptiness.eventapi.types.EventType;
import space.emptiness.events.EventTarget;
import space.emptiness.events.misc.EventPacket;
import space.emptiness.events.world.*;
import space.emptiness.module.Category;
import space.emptiness.module.Module;
import space.emptiness.module.ModuleManager;
import space.emptiness.module.value.Mode;
import space.emptiness.module.value.Value;
import space.emptiness.utils.PacketUtils;
import space.emptiness.utils.TimerUtil;

import java.util.ArrayList;
import java.util.Queue;
import java.util.Random;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ThreadLocalRandom;

public class Disabler extends Module {
    public int counter = 0;
    public double posX;
    public double posY;
    public double posZ;
    private static Vec3 initPos;

    private ArrayList<Packet> packets = new ArrayList<>();
    private boolean cancel;

    private TimerUtil timer1 = new TimerUtil(), timer2 = new TimerUtil(), abuseTimer = new TimerUtil();
    private TimerUtil timer = new TimerUtil();

    public Disabler() {
        super("Disabler", new String[]{}, Category.Exploit);
    }

    @EventTarget
    public void onWorldLoad(EventWorldLoad e) {
        abuseTimer.reset();
    };

    @Override
    public void onEnable() {

        counter = 0;
    }
    @EventTarget
    public void onMotion(EventUpdate e){
        setSuffix("Hypixel");
    }
    @EventTarget
    private void onC04(EventPacket event) {
        if (event.isOutGoing() &&event.getPacket() instanceof C03PacketPlayer || event.getPacket() instanceof C03PacketPlayer.C04PacketPlayerPosition || event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
            if (mc.thePlayer.ticksExisted < 50) {
                event.setCancelled(true);
                //	Helper.sendMessage("Debug 2");
            }
        }

        if (event.getPacket() instanceof C03PacketPlayer.C06PacketPlayerPosLook) {
            final C03PacketPlayer.C06PacketPlayerPosLook playerPacket = (C03PacketPlayer.C06PacketPlayerPosLook) event.getPacket();
            if (counter > 0) {
                if (playerPacket.x == posX && playerPacket.y == posY && playerPacket.z == posZ) {
                    mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(playerPacket.x, playerPacket.y, playerPacket.z, playerPacket.onGround));
                    event.setCancelled(true);
                }
            }
            counter += 1;

            if (event.getPacket() instanceof C03PacketPlayer.C05PacketPlayerLook && mc.thePlayer.isRiding()) {
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
            } else if (event.getPacket() instanceof C0CPacketInput && mc.thePlayer.isRiding()) {
                mc.getNetHandler().addToSendQueue(event.getPacket());
                mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                event.setCancelled(true);
            }
        }
        final Packet p =  event.getPacket();
        doTimerDisabler(event);
        if( p instanceof C03PacketPlayer) {
            final C03PacketPlayer c03 = (C03PacketPlayer) p;

            if(mc.thePlayer.ticksExisted == 1) {
                initPos = new Vec3(c03.x + getRandom(-1000000, 1000000), c03.y + getRandom(-1000000, 1000000), c03.z + getRandom(-1000000, 1000000));
            } else if(mc.thePlayer.connection.doneLoadingTerrain && initPos != null && mc.thePlayer.ticksExisted < 100) {
                c03.x = initPos.xCoord;
                c03.y = initPos.yCoord;
                c03.z = initPos.zCoord;
            }
            //		Helper.sendMessage("Debug 1");
        }
    }
    @EventTarget
    public void onS08 (EventPacketReceive event){
        if (event.getPacket() instanceof S08PacketPlayerPosLook) {
            final S08PacketPlayerPosLook s08 = (S08PacketPlayerPosLook) event.getPacket();
            posX = s08.x;
            posY = s08.y;
            posZ = s08.z;
            //	Helper.sendMessage("Debug 3");
        }

        if (event.getPacket() instanceof S07PacketRespawn) {
            counter = 0;
        }
    }

    private void doTimerDisabler(EventPacket e) {
        if (e.getPacket() instanceof C03PacketPlayer) {
            C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) e.getPacket();

            // If the player isn't moving, and if the player isn't using an item, cancel the event.
            if (!c03PacketPlayer.isMoving() && !mc.thePlayer.isUsingItem()) {
                e.setCancelled(true);
            }
            if (cancel) {
                if (!timer2.hasTimeElapsed(400, false)) {
                    if (ModuleManager.getModuleByName("Scaffold").isEnabled()) {
                        e.setCancelled(true);
                        packets.add(e.getPacket());
                    }
                } else {
                    packets.forEach(PacketUtils::sendPacketNoEvent);
                    packets.clear();
                    cancel = false;
                }
            }
        }
    }

    public static double getRandom(double min, double max) {
        if (min == max) {
            return min;
        } else if (min > max) {
            final double d = min;
            min = max;
            max = d;
        }
        return ThreadLocalRandom.current().nextDouble(min, max);
    }
}
